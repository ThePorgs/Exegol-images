on:
  workflow_call:
    inputs:
      DOCKER_BUILD_REPO:
        required: true
        type: string
      IMAGE_BASE_NAME:
        required: true
        type: string
      IMAGE_VERSION:
        required: false
        default: ''
        type: string
      DOCKERFILE:
        required: true
        type: string
      ARCH:
        required: true
        type: string
    secrets:
      DOCKER_PASSWORD:
        required: true
      DOCKER_USERNAME:
        required: true

jobs:
  buildx:
    name: Building ${{ inputs.ARCH }}
    timeout-minutes: 360
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    outputs:
      matrix_tests: ${{ steps.set-matrix.outputs.matrix_tests }}
      matrix_p1: ${{ steps.set-matrix.outputs.matrix_p1 }}
      matrix_p2: ${{ steps.set-matrix.outputs.matrix_p2 }}
      matrix_p3: ${{ steps.set-matrix.outputs.matrix_p3 }}
      matrix_p4: ${{ steps.set-matrix.outputs.matrix_p4 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare build
        id: prepare_build
        env:
          DOCKER_BUILD_REPO: ${{ inputs.DOCKER_BUILD_REPO }}
          IMAGE_BASE_NAME: ${{ inputs.IMAGE_BASE_NAME }}
          IMAGE_VERSION: ${{ inputs.IMAGE_VERSION }}
          ARCH: ${{ inputs.ARCH }}
        run: |
          IMAGE_NAME="${IMAGE_BASE_NAME}-${ARCH}"
          DOCKER_REPO=${DOCKER_BUILD_REPO}
          COMMIT_ID=$(git rev-parse "$GITHUB_SHA")
          if [ "$IMAGE_VERSION" == "" ]; then
            IMAGE_VERSION=${COMMIT_ID:0:8}
          fi
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "image_repo=${DOCKER_REPO}" >> $GITHUB_OUTPUT
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "image_full_name=${DOCKER_REPO}:${IMAGE_NAME}"
          echo "image_full_name=${DOCKER_REPO}:${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "image_version=${IMAGE_VERSION}"
          echo "image_version=${IMAGE_VERSION}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and load the image
        if: success()
        uses: docker/build-push-action@v3
        with:
          load: true
          build-args: |
            TAG=${{ inputs.IMAGE_BASE_NAME }}
            VERSION=${{ steps.prepare_build.outputs.image_version }}
            BUILD_DATE=${{ steps.prepare_build.outputs.build_date }}
          tags: ${{ steps.prepare_build.outputs.image_full_name }}
          platforms: linux/${{ inputs.ARCH }}
          file: ${{ inputs.DOCKERFILE }}
          context: .
      - name: List available tests
        id: set-matrix
        run: |
          ID=$(docker run --rm -t -d ${{ steps.prepare_build.outputs.image_full_name }} endless)
          docker exec $ID zsh -c 'cat /.exegol/build_pipeline_tests/all_commands.txt | grep -vE "^\s*$" | sort -u > /.exegol/build_pipeline_tests/all_commands.sorted.txt'
          line_count=$(docker exec $ID zsh -c 'wc -l /.exegol/build_pipeline_tests/all_commands.sorted.txt | cut -d " " -f 1')
          echo "$line_count test commands found!"
          docker exec $ID python3 /.exegol/build_pipeline_tests/ingest_tests.py
          docker exec $ID zsh -c 'cat /.exegol/build_pipeline_tests/tests.json'
          echo "matrix_tests=$(docker exec $ID zsh -c 'cat /.exegol/build_pipeline_tests/tests.json')" >> $GITHUB_OUTPUT
          if [ $line_count -lt 1000 ]; then
            echo "matrix_p1=$(docker exec $ID zsh -c 'head /.exegol/build_pipeline_tests/all_commands.sorted.txt -n 250' | jq -R -s -c 'split("\n")')" >> $GITHUB_OUTPUT
            echo "matrix_p2=$(docker exec $ID zsh -c 'tail /.exegol/build_pipeline_tests/all_commands.sorted.txt -n +251 | head -n 250' | jq -R -s -c 'split("\n")')" >> $GITHUB_OUTPUT
            echo "matrix_p3=$(docker exec $ID zsh -c 'tail /.exegol/build_pipeline_tests/all_commands.sorted.txt -n +501 | head -n 250' | jq -R -s -c 'split("\n")')" >> $GITHUB_OUTPUT
            echo "matrix_p4=$(docker exec $ID zsh -c 'tail /.exegol/build_pipeline_tests/all_commands.sorted.txt -n +751 | head -n 250' | jq -R -s -c 'split("\n")')" >> $GITHUB_OUTPUT
            return_code=0
          else
            echo "Too many command to test! (${line_count}/1000)"
            echo "Maximum of 250 tests per matrix."
            return_code=1
          fi
          docker stop $ID
          exit $return_code
  push:
    name: Push ${{ inputs.ARCH }}
    timeout-minutes: 360
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    needs: buildx
    if: ${{ always() && needs.buildx.result == 'success' }}
    steps:
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push docker image
        run: docker push ${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }}
# TODO with fix: https://github.com/orgs/community/discussions/32023
#  tests:
#    name: Tests ${{ inputs.ARCH }}
#    needs: 
#      - buildx
#      - push
#    if: ${{ needs.buildx.outputs.matrix_tests != '[]' && needs.buildx.outputs.matrix_tests != '' }}  # TODO add push success constraint
#    strategy:
#      fail-fast: false
#      matrix: ${{ fromJson(needs.buildx.outputs.matrix_tests).tests }}
#    uses: ./.github/workflows/testing.yml
#    with:
#      DOCKER_BUILD_REPO: ${{ inputs.DOCKER_BUILD_REPO }}
#      IMAGE_BASE_NAME: ${{ inputs.IMAGE_BASE_NAME }}
#      ARCH: ${{ inputs.arch }}
#      TESTS: ${{ matrix.tests }}
          
  test1:
    name: Test ${{ inputs.ARCH }} (${{ matrix.command }})
    needs: 
      - buildx
      - push
    if: ${{ needs.buildx.outputs.matrix_p1 != '[]' && needs.buildx.outputs.matrix_p1 != '' }}
    runs-on:
      - self-hosted
      - tester
      - ${{ inputs.ARCH }}
    strategy:
      fail-fast: false
      matrix:
        command: ${{ fromJson(needs.buildx.outputs.matrix_p1) }}
    steps:
      - name: Image command testing
        run: |
          COMMAND=$(cat <<EOF
          ${{ matrix.command }}
          EOF
          )
          image_name="${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }}"
          echo -e "\nUsing image $image_name in version $(docker image inspect --format='{{index .Config.Labels "org.exegol.version"}} ({{index .Id}})' $image_name)\n"
          echo "$ ${COMMAND}"
          docker run --rm --env "DISABLE_AUTO_UPDATE=true" --env CMD="$COMMAND" $image_name cmd zsh -c 'autoload -Uz compinit; compinit; source ~/.zshrc; eval $CMD'
  test2:
    name: Test ${{ inputs.ARCH }} (${{ matrix.command }})
    needs: 
      - buildx
      - push
    if: ${{ needs.buildx.outputs.matrix_p2 != '[]' && needs.buildx.outputs.matrix_p2 != '' }}
    runs-on:
      - self-hosted
      - tester
      - ${{ inputs.ARCH }}
    strategy:
      fail-fast: false
      matrix:
        command: ${{ fromJson(needs.buildx.outputs.matrix_p2) }}
    steps:
      - name: Image command testing
        run: |
          COMMAND=$(cat <<EOF
          ${{ matrix.command }}
          EOF
          )
          image_name="${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }}"
          echo -e "\nUsing image $image_name in version $(docker image inspect --format='{{index .Config.Labels "org.exegol.version"}} ({{index .Id}})' $image_name)\n"
          echo "$ ${COMMAND}"
          docker run --rm --env "DISABLE_AUTO_UPDATE=true" --env CMD="$COMMAND" $image_name cmd zsh -c 'autoload -Uz compinit; compinit; source ~/.zshrc; eval $CMD'
  test3:
    name: Test ${{ inputs.ARCH }} (${{ matrix.command }})
    needs: 
      - buildx
      - push
    if: ${{ needs.buildx.outputs.matrix_p3 != '[]' && needs.buildx.outputs.matrix_p3 != '' }}
    runs-on:
      - self-hosted
      - tester
      - ${{ inputs.ARCH }}
    strategy:
      fail-fast: false
      matrix:
        command: ${{ fromJson(needs.buildx.outputs.matrix_p3) }}
    steps:
      - name: Image command testing
        run: |
          COMMAND=$(cat <<EOF
          ${{ matrix.command }}
          EOF
          )
          image_name="${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }}"
          echo -e "\nUsing image $image_name in version $(docker image inspect --format='{{index .Config.Labels "org.exegol.version"}} ({{index .Id}})' $image_name)\n"
          echo "$ ${COMMAND}"
          docker run --rm --env "DISABLE_AUTO_UPDATE=true" --env CMD="$COMMAND" $image_name cmd zsh -c 'autoload -Uz compinit; compinit; source ~/.zshrc; eval $CMD'
  test4:
    name: Test ${{ inputs.ARCH }} (${{ matrix.command }})
    needs: 
      - buildx
      - push
    if: ${{ needs.buildx.outputs.matrix_p4 != '[]' && needs.buildx.outputs.matrix_p4 != '' }}
    runs-on:
      - self-hosted
      - tester
      - ${{ inputs.ARCH }}
    strategy:
      fail-fast: false
      matrix:
        command: ${{ fromJson(needs.buildx.outputs.matrix_p4) }}
    steps:
      - name: Image command testing
        run: |
          COMMAND=$(cat <<EOF
          ${{ matrix.command }}
          EOF
          )
          image_name="${{ inputs.DOCKER_BUILD_REPO }}:${{ inputs.IMAGE_BASE_NAME }}-${{ inputs.ARCH }}"
          echo -e "\nUsing image $image_name in version $(docker image inspect --format='{{index .Config.Labels "org.exegol.version"}} ({{index .Id}})' $image_name)\n"
          echo "$ ${COMMAND}"
          docker run --rm --env "DISABLE_AUTO_UPDATE=true" --env CMD="$COMMAND" $image_name cmd zsh -c 'autoload -Uz compinit; compinit; source ~/.zshrc; eval $CMD'

  clean:
    name: Cleaning ${{ inputs.ARCH }}
    needs:
      - buildx
      - push
      - test1
      - test2
      - test3
      - test4
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    if: always()  # always mode clean the environment even when the task is cancelled by a user
    steps:
      - name: Clean unused dangling images
        run: docker image prune --filter "label=org.exegol.app=Exegol" --force
      - name: Clean unused volume
        run: docker volume prune --force

  clean_build_images:
    # Remove final image (free disk space)
    name: Clean docker image
    needs:
      - buildx
      - push
      - test1
      - test2
      - test3
      - test4
    if: ${{ always() && needs.buildx.result == 'success' && needs.push.result == 'success' }}
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    env:
      DOCKER_BUILD_REPO: ${{ inputs.DOCKER_BUILD_REPO }}
      IMAGE_BASE_NAME: ${{ inputs.IMAGE_BASE_NAME }}
      ARCH: ${{ inputs.ARCH }}
    steps:
      - name: Remove build image ${{ inputs.IMAGE_BASE_NAME }}-${{ matrix.arch }}
        run: |
          image_name=${DOCKER_BUILD_REPO}:${IMAGE_BASE_NAME}-${ARCH}
          echo "Removing $image_name"
          docker image inspect $image_name && docker rmi $image_name
