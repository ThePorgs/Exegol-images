on:
  workflow_call:
    inputs:
      DOCKER_BUILD_REPO:
        required: true
        type: string
      IMAGE_BASE_NAME:
        required: true
        type: string
      DOCKERFILE:
        required: true
        type: string
      ARCH:
        required: true
        type: string
    secrets:
      DOCKER_PASSWORD:
        required: true
      DOCKER_USERNAME:
        required: true

jobs:
  buildx:
    timeout-minutes: 360
    runs-on: [ self-hosted, inputs.ARCH ]
    outputs:
      matrix_tests: ${{ steps.set-matrix.outputs.matrix_tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare build
        id: prepare_build
        env:
          DOCKER_BUILD_REPO: ${{ inputs.DOCKER_BUILD_REPO }}
          IMAGE_BASE_NAME: ${{ inputs.IMAGE_BASE_NAME }}
          ARCH: ${{ inputs.ARCH }}
        run: |
          IMAGE_NAME="${IMAGE_BASE_NAME}-${ARCH}"
          DOCKER_REPO=${DOCKER_BUILD_REPO}
          COMMIT_ID=$(git rev-parse "$GITHUB_SHA")
          IMAGE_VERSION=${COMMIT_ID:0:8}
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "image_repo=${DOCKER_REPO}" >> $GITHUB_OUTPUT
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "image_full_name=${DOCKER_REPO}:${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "image_version=${IMAGE_VERSION}" >> $GITHUB_OUTPUT
          echo "build_date=${BUILD_DATE}" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and load the image
        if: success()
        uses: docker/build-push-action@v3
        with:
          load: true
          build-args: |
            TAG=${{ inputs.IMAGE_BASE_NAME }}
            VERSION=${{ steps.prepare_build.outputs.image_version }}
            BUILD_DATE=${{ steps.prepare_build.outputs.build_date }}
          tags: ${{ steps.prepare_build.outputs.image_full_name }}
          platforms: linux/${{ inputs.ARCH }}
          file: ${{ inputs.DOCKERFILE }}
          context: .
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push docker image
        run: docker push ${{ steps.prepare_build.outputs.image_full_name }}
      - name: List available tests
        id: set-matrix
        run: |
          ID=$(docker run --rm -t -d ${{ steps.prepare_build.outputs.image_full_name }} endless)
          docker exec $ID zsh -c 'cat /.exegol/build_pipeline_tests/all_commands.txt | sort -u > /.exegol/build_pipeline_tests/all_commands.sorted.txt'
          line_count=$(docker exec $ID zsh -c 'wc -l /.exegol/build_pipeline_tests/all_commands.sorted.txt | cut -d " " -f 1')
          echo "$line_count test commands found!"
          docker exec $ID python3 /.exegol/build_pipeline_tests/ingest_tests.py
          echo "matrix_tests=$(docker exec $ID zsh -c 'cat /.exegol/tests.json'" >> $GITHUB_OUTPUT
          docker stop $ID
          exit $return_code
  tests:
    name: Tests
    needs: buildx
    strategy:
      matrix:
        tests: ${{ fromJson(needs.buildx.outputs.matrix_tests) }}
    uses: ./.github/workflows/testing.yml
    with:
      DOCKER_BUILD_REPO: ${{ inputs.DOCKER_BUILD_REPO }}
      IMAGE_BASE_NAME: ${{ inputs.IMAGE_BASE_NAME }}
      DOCKERFILE: ${{ inputs.DOCKERFILE }}
      ARCH: ${{ inputs.arch }}
      TESTS: ${{ matrix.tests }}

  clean:
    needs: buildx
    runs-on: [ self-hosted, inputs.ARCH ]
    if: always()  # always mode clean the environment even when the task is cancelled by a user
    steps:
      - name: Clean unused dangling images
        run: docker image prune --filter "label=org.exegol.app=Exegol" --force
