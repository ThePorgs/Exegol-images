name: External PR tests

on:
  pull_request:
    branches:
      - dev
      - "*.*.*"
      - "*.*.*b*"
    paths-ignore:
      - ".github/**"
      - "**.md"

# creating a separate concurrency group for each PR
# so that our "PR checks" are always running for the latest commit in the PR
# and as PRs are updated we want to make sure "in progress" jobs are killed so we don't waste resources
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  # intermediary registry in which architecture-specific images must be pushed
  INTERMEDIATE_IMAGES_BUILDS_REGISTRY: "nwodtuhs/exegol-builds"
  # final registry target, in which arch-specific images must be aggregated
  IMAGE_TARGET_REGISTRY: "nwodtuhs/exegol"
  DOCKERFILE: "Dockerfile"

jobs:
  varset:
    name: Initialize variables
    runs-on: self-hosted
    outputs:
      INTERMEDIATE_IMAGES_BUILDS_REGISTRY: ${{ steps.varset.outputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
      IMAGE_TARGET_REGISTRY: ${{ steps.varset.outputs.IMAGE_TARGET_REGISTRY }}
      IMAGE_NAME: ${{ steps.varset.outputs.IMAGE_NAME }}
      DOCKERFILE: ${{ steps.varset.outputs.DOCKERFILE }}
    steps:
      - name: Passing workflow env vars to reusable workflows
        id: varset
        run: |
          PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          echo "INTERMEDIATE_IMAGES_BUILDS_REGISTRY=${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}" >> $GITHUB_OUTPUT
          echo "IMAGE_TARGET_REGISTRY=${IMAGE_TARGET_REGISTRY}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=PR${PR_NUMBER}"
          echo "IMAGE_NAME=PR${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "DOCKERFILE=${DOCKERFILE}" >> $GITHUB_OUTPUT

  code-check:
    name: Code compliance
    uses: ./.github/workflows/sub_code_check.yml

  build_belt:
    name: Build belt
    needs: [varset, code-check]
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64, amd64 ]
    uses: ./.github/workflows/sub_build_belt.yml
    with:
      INTERMEDIATE_IMAGES_BUILDS_REGISTRY: ${{ needs.varset.outputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
      IMAGE_NAME: ${{ needs.varset.outputs.IMAGE_NAME }}
      DOCKERFILE: ${{ needs.varset.outputs.DOCKERFILE }}
      IMAGE_VERSION: ${{ needs.varset.outputs.IMAGE_VERSION }}
      ARCH: ${{ matrix.arch }}
      PR_MODE: true

  clean_runners:
    name: Clean runners
    needs:
      - varset
      - build_belt
    if: always() && !contains(needs.build_belt.outputs.build, 'failure')
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64, amd64 ]
    runs-on:
      - self-hosted
      - builder
      - ${{ matrix.arch }}
    steps:
      - name: Remove built image ${{ needs.varset.outputs.IMAGE_NAME }}-${{ matrix.arch }}
        run: |
          image_name=${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${{ needs.varset.outputs.IMAGE_NAME }}-${{ matrix.arch }}
          echo "Removing $image_name"
          docker image inspect $image_name || exit 0 && docker rmi $image_name

