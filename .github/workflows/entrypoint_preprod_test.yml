name: Pre-release (ad)
run-name: Pre-release (ad) - ${{ github.event.pull_request.title }}

on:
  pull_request:
    title:
      - "Release *.*.*"
      - "Release *.*.*b*"
    types: [labeled]
    branches: refacto2
    paths-ignore:
#      - ".github/**"
      - "**.md"

env:
  # intermediate registry in which architecture-specific images and base images must be pushed
  INTERMEDIATE_IMAGES_BUILDS_REGISTRY: "nwodtuhs/exegol-builds"

  # base image is used as initial layer when building the final image
  # TODO uncomment below
  # BASE_IMAGE_REGISTRY: "nwodtuhs/exegol-misc-preprod"
  BASE_IMAGE_REGISTRY: "nwodtuhs/exegol-misc-dev-preprod"
  BASE_IMAGE_TAG: "base"

  # final image parameters
  # TODO uncomment below
  # IMAGE_TARGET_REGISTRY: "nwodtuhs/exegol-preprod"
  IMAGE_TARGET_REGISTRY: "nwodtuhs/exegol-dev-preprod"
  IMAGE_TAG: "ad"
  DOCKERFILE: "./sources/dockerfiles/debug.dockerfile"

  # ThePorgs/Exegol-docs branch for tools lists export
  DOCS_TARGET_BRANCH: "dev-images"

jobs:
  # https://github.com/orgs/community/discussions/26671, "canâ€™t pass ENV variables to the reusable workflow"
  init:
    if: ${{ github.event.label.name == 'base success' }}
    name: Initialize
    runs-on: self-hosted
    outputs:
      INTERMEDIATE_IMAGES_BUILDS_REGISTRY: ${{ steps.varset.outputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
      IMAGE_TARGET_REGISTRY: ${{ steps.varset.outputs.IMAGE_TARGET_REGISTRY }}
      IMAGE_TAG: ${{ steps.varset.outputs.IMAGE_TAG }}
      IMAGE_VERSION: ${{ steps.varset.outputs.IMAGE_VERSION }}
      DOCKERFILE: ${{ steps.varset.outputs.DOCKERFILE }}
      BASE_IMAGE_REGISTRY: ${{ steps.varset.outputs.BASE_IMAGE_REGISTRY }}
      BASE_IMAGE_TAG: ${{ steps.varset.outputs.BASE_IMAGE_TAG }}
      DOCS_TARGET_BRANCH: ${{ steps.varset.outputs.DOCS_TARGET_BRANCH }}
      image_exists: ${{ steps.check_remote_image.outputs.image_exists }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setting variables
        id: varset
        run: |
          echo "INTERMEDIATE_IMAGES_BUILDS_REGISTRY=${{ env.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}" >> $GITHUB_OUTPUT
          echo "IMAGE_TARGET_REGISTRY=${{ env.IMAGE_TARGET_REGISTRY }}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "IMAGE_VERSION=$(echo ${{ github.event.pull_request.title }} | cut -d ' ' -f 2)" >> $GITHUB_OUTPUT
          echo "DOCKERFILE=${{ env.DOCKERFILE }}" >> $GITHUB_OUTPUT
          echo "BASE_IMAGE_REGISTRY=${{ env.BASE_IMAGE_REGISTRY }}" >> $GITHUB_OUTPUT
          echo "BASE_IMAGE_TAG=${{ env.BASE_IMAGE_TAG }}" >> $GITHUB_OUTPUT
          echo "DOCS_TARGET_BRANCH=${{ env.DOCS_TARGET_BRANCH }}" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Checking if remote image exists
        id: check_remote_image
        run: |
          echo "docker manifest inspect ${{ env.IMAGE_TARGET_REGISTRY }}:${{ env.IMAGE_TAG }}-${{ steps.varset.outputs.IMAGE_VERSION }}"
          if docker manifest inspect ${{ env.IMAGE_TARGET_REGISTRY }}:${{ env.IMAGE_TAG }}-${{ steps.varset.outputs.IMAGE_VERSION }}; then
            echo "Image exists"
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist"
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT

  debug:
    name: debug
    needs: init
    if: always() && needs.init.outputs.image_exists == 'false'
    runs-on: self-hosted
    steps:
      - run: echo ${{ needs.init.outputs.image_exists }}
