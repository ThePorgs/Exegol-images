name: (level 1 sub) Belt

on:
  workflow_call:
    inputs:
      INTERMEDIATE_IMAGES_BUILDS_REGISTRY:
        required: true
        type: string
      BASE_IMAGE_REGISTRY:
        required: false
        type: string
      FINAL_MANIFEST_REGISTRY:
        required: false
        type: string
      IMAGE_NAME:
        description: "nightly/full/osint/ad/..., or PRxyz if external pull request (with x, y, z integers)"
        required: true
        type: string
      IMAGE_VERSION:
        description: "Nothing if nightly build, else x.y.z with x, y, z integers"
        required: true
        default: ''
        type: string
      DOCKERFILE:
        required: true
        type: string
      ARCH:
        description: "Target architecture (arm64 or amd64)"
        required: true
        type: string
      DOCS_TARGET_BRANCH:
        description: "Target branch on ThePorgs/Exegol-docs on which tools list are exported"
        required: false
        type: string
      PR_MODE:
        description: "External pull request mode, no authenticated action operated (ex. push to dockerhub or other github repo)"
        required: false
        type: boolean
      BASE_MODE:
        description: "Layer 0 build mode, no push to documentation github repo"
        required: false
        type: boolean
    secrets:
      DOCKER_PASSWORD:
        required: false
      DOCKER_USERNAME:
        required: false
      EXEGOL_DOCS_SSH_DEPLOY_KEY:
        required: false
    outputs:
      build:
        description: "Failed build"
        value: ${{ jobs.export_results.outputs.build }}
      push:
        description: "Failed push"
        value: ${{ jobs.export_results.outputs.push }}
      test:
        description: "Failed tests"
        value: ${{ jobs.export_results.outputs.test }}

jobs:
  prune:
    name: Pre-build runner clean
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    steps:
      - name: Clean dangling build cache
        run: docker builder prune --force
      - name: Clean Exegol dangling images
        # dangling: images that were replaced with ones with the same name and tag
        run: docker image prune --force --filter "label=org.exegol.app=Exegol"
      - name: Clean unused local volumes
        run: docker volume prune --force

  debug_pre_build:
    name: (dbg) pre-build docker info
    needs: prune
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    steps:
      - name: List images
        run: docker image ls -a
      - name: List containers
        run: docker ps

  build:
    name: Build image
    uses: ./.github/workflows/sub_build.yml
    needs: debug_pre_build
    with:
      INTERMEDIATE_IMAGES_BUILDS_REGISTRY: ${{ inputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
      BASE_IMAGE_REGISTRY: ${{ inputs.BASE_IMAGE_REGISTRY }}
      FINAL_MANIFEST_REGISTRY: ${{ inputs.FINAL_MANIFEST_REGISTRY }}
      IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
      IMAGE_VERSION: ${{ inputs.IMAGE_VERSION }}
      DOCKERFILE: ${{ inputs.DOCKERFILE }}
      ARCH: ${{ inputs.ARCH }}
      PR_MODE: ${{ inputs.PR_MODE }}

  debug_post_build:
    name: (dbg) post-build docker info
    needs: build
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    steps:
      - name: List images
        run: docker image ls -a
      - name: List containers
        run: docker ps
      - name: Inspect built image
        run: docker inspect ${{ inputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}:${{ inputs.IMAGE_NAME }}-${{ inputs.IMAGE_VERSION }}-${{ inputs.ARCH }}

  test:
    name: Test
    needs: build
    uses: ./.github/workflows/sub_test.yml
    with:
      INTERMEDIATE_IMAGES_BUILDS_REGISTRY: ${{ inputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
      IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
      IMAGE_VERSION: ${{ inputs.IMAGE_VERSION }}
      ARCH: ${{ inputs.ARCH }}

  push:
    name: Push
    needs: [ build, test ]
    # Push image to exegol-builds whatever the outcome of "test" is, as long as the image was built (which is already an implicit requirement of the "test" job)
    # Only pushing if not in PR_MODE, in order to prevent external PRs from accessing secrets
    if: always() && inputs.PR_MODE == false && ( needs.test.result == 'failure' || needs.test.result == 'success' ) && needs.build.outputs.build == 'success'
    uses: ./.github/workflows/sub_push.yml
    with:
      INTERMEDIATE_IMAGES_BUILDS_REGISTRY: ${{ inputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
      IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
      IMAGE_VERSION: ${{ inputs.IMAGE_VERSION }}
      ARCH: ${{ inputs.ARCH }}
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  export_tools:
    name: Export tools list
    needs: test
    # Only exporting tools list if not in PR_MODE, in order to prevent external PRs from accessing GitHub token
    # Only exporting tools list if tests were a success
    # TODO remove the following line when merging this in dev, this is only to prevent debug tests from exporting to the doc
    if: always() && inputs.PR_MODE == false && inputs.BASE_MODE == false && needs.test.result == 'success' && inputs.BASE_MODE == true
    #if: always() && inputs.PR_MODE == false && inputs.BASE_MODE == false && needs.test.result == 'success'
    uses: ./.github/workflows/sub_export_tools.yml
    with:
      INTERMEDIATE_IMAGES_BUILDS_REGISTRY: ${{ inputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
      IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
      IMAGE_VERSION: ${{ inputs.IMAGE_VERSION }}
      ARCH: ${{ inputs.ARCH }}
      DOCS_TARGET_BRANCH: ${{ inputs.DOCS_TARGET_BRANCH }}
    secrets:
      EXEGOL_DOCS_SSH_DEPLOY_KEY: ${{ secrets.EXEGOL_DOCS_SSH_DEPLOY_KEY }}

  export_results:
    name: Exporting all results for higher jobs
    needs:
      - build
      - test
      - push
    if: always()
    runs-on: self-hosted
    steps:
      - name: Extract build result
        id: build
        if: needs.build.result != 'success'
        run: echo "result=failure" >> $GITHUB_OUTPUT
      - name: Extract tests result
        id: test
        if: needs.test.result != 'success'
        run: echo "result=failure" >> $GITHUB_OUTPUT
      - name: Extract push result
        id: push
        if: needs.push.result != 'success'
        run: echo "result=failure" >> $GITHUB_OUTPUT
    outputs:
      build: ${{ steps.build.outputs.result }}
      test: ${{ steps.test.outputs.result }}
      push: ${{ steps.push.outputs.result }}