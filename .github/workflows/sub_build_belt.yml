name: (level 1 sub) Belt

on:
  workflow_call:
    inputs:
      IMAGE_REGISTRY:
        description: "registry for the image to build"
        required: true
        type: string
      IMAGE_NAME:
        description: "full name for the image to build"
        required: true
        type: string
      IMAGE_TAG:
        description: "nightly/full/osint/ad/..., or PRxyz if external pull request (with x, y, z integers)"
        required: true
        type: string
      IMAGE_VERSION:
        required: false
        type: string
      DOCKERFILE:
        required: true
        type: string
      ARCH:
        description: "Target architecture (arm64 or amd64)"
        required: true
        type: string
      PUSH_IMAGE:
        description: "push image to registry"
        required: true
        type: boolean
      EXPORT_TOOLS:
        description: "push to documentation github repo"
        required: true
        type: boolean
      DOCS_TARGET_BRANCH:
        description: "Target branch on ThePorgs/Exegol-docs on which tools list are exported"
        required: false
        type: string
      BASE_IMAGE_REGISTRY:
        description: "registry of the base layer image"
        required: false
        type: string
      BASE_IMAGE_NAME:
        description: "base layer image name"
        required: false
        type: string
    secrets:
      DOCKER_PASSWORD:
        required: false
      DOCKER_USERNAME:
        required: false
      EXEGOL_DOCS_SSH_DEPLOY_KEY:
        required: false
    outputs:
      build:
        description: "Failed build"
        value: ${{ jobs.export_results.outputs.build }}
      push:
        description: "Failed push"
        value: ${{ jobs.export_results.outputs.push }}
      test:
        description: "Failed tests"
        value: ${{ jobs.export_results.outputs.test }}

jobs:
  prune:
    name: Pre-build runner clean
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    steps:
      - name: Clean dangling build cache
        run: docker builder prune --force
      - name: Clean Exegol dangling images
        # dangling: images that were replaced with ones with the same name and tag
        run: docker image prune --force --filter "label=org.exegol.app=Exegol"
      - name: Clean unused local volumes
        run: docker volume prune --force

  debug_pre_build:
    name: (dbg) pre-build docker info
    needs: prune
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    steps:
      - name: List images
        run: docker image ls -a
      - name: List containers
        run: docker ps

  build:
    name: Build image
    uses: ./.github/workflows/sub_build.yml
    needs: debug_pre_build
    with:
      BASE_IMAGE_REGISTRY: ${{ inputs.BASE_IMAGE_REGISTRY }}
      BASE_IMAGE_NAME: ${{ inputs.BASE_IMAGE_NAME }}
      IMAGE_REGISTRY: ${{ inputs.IMAGE_REGISTRY }}
      IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
      IMAGE_TAG: ${{ inputs.IMAGE_TAG }}
      IMAGE_VERSION: ${{ inputs.IMAGE_VERSION }}
      DOCKERFILE: ${{ inputs.DOCKERFILE }}
      ARCH: ${{ inputs.ARCH }}

  debug_post_build:
    name: (dbg) post-build docker info
    needs: build
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    steps:
      - name: List images
        run: docker image ls -a
      - name: List containers
        run: docker ps
      - name: Inspect built image
        run: docker inspect ${{ inputs.IMAGE_REGISTRY }}:${{ inputs.IMAGE_NAME }}

  test:
    name: Test
    needs: build
    uses: ./.github/workflows/sub_test.yml
    with:
      IMAGE_REGISTRY: ${{ inputs.IMAGE_REGISTRY }}
      IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
      ARCH: ${{ inputs.ARCH }}

  push:
    name: Push image (${{ inputs.ARCH }})
    needs: [ build, test ]
    # Push image to exegol-builds whatever the outcome of "test" is, as long as the image was built (which is already an implicit requirement of the "test" job)
    if: always() && inputs.PUSH_IMAGE == true && ( needs.test.result == 'failure' || needs.test.result == 'success' ) && needs.build.result == 'success'
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    timeout-minutes: 360
    steps:
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push docker image
        run: docker push ${{ inputs.IMAGE_REGISTRY }}:${{ inputs.IMAGE_NAME }}

  export_tools:
    name: Export tools list
    needs: test
    # Only exporting tools list if tests were a success
    if: always() && inputs.EXPORT_TOOLS == true && needs.test.result == 'success'
    uses: ./.github/workflows/sub_export_tools.yml
    with:
      IMAGE_REGISTRY: ${{ inputs.IMAGE_REGISTRY }}
      IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
      IMAGE_VERSION: ${{ inputs.IMAGE_VERSION }}
      IMAGE_TAG: ${{ inputs.IMAGE_TAG }}
      DOCS_TARGET_BRANCH: ${{ inputs.DOCS_TARGET_BRANCH }}
      ARCH: ${{ inputs.ARCH }}
    secrets:
      EXEGOL_DOCS_SSH_DEPLOY_KEY: ${{ secrets.EXEGOL_DOCS_SSH_DEPLOY_KEY }}

  export_results:
    name: Exporting all results for higher jobs
    needs:
      - build
      - test
      - push
    if: always()
    runs-on: self-hosted
    steps:
      - name: Extract build result
        id: build
        run: echo "result=${{ needs.build.result }}" >> $GITHUB_OUTPUT
      - name: Extract tests result
        id: test
        run: echo "result=${{ needs.test.result }}" >> $GITHUB_OUTPUT
      - name: Extract push result
        id: push
        run: echo "result=${{ needs.push.result }}" >> $GITHUB_OUTPUT
      - name: Show results
        run: cat $GITHUB_OUTPUT
    outputs:
      build: ${{ steps.build.outputs.result }}
      test: ${{ steps.test.outputs.result }}
      push: ${{ steps.push.outputs.result }}