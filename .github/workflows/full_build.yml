on:
  workflow_call:
    inputs:
      DOCKER_BUILD_REPO:
        required: true
        type: string
      DOCKER_TARGET_REPO:
        required: false
        default: ''
        type: string
      IMAGE_BASE_NAME:
        required: true
        type: string
      IMAGE_VERSION:
        required: false
        default: ''
        type: string
      DOCKERFILE:
        required: true
        type: string
      SUPPORTED_ARCH:
        required: true
        type: string
    secrets:
      DOCKER_PASSWORD:
        required: true  # Secrets cannot be used when the pipeline is triggered from a PR : TODO
      DOCKER_USERNAME:
        required: true

jobs:
  build_tests:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        # Wait for bug fix for github: https://github.com/orgs/community/discussions/32023
        #arch: ${{ fromJson(inputs.SUPPORTED_ARCH) }}
        arch: ["amd64", "arm64"]
    uses: ./.github/workflows/building.yml
    with:
      DOCKER_BUILD_REPO: ${{ inputs.DOCKER_BUILD_REPO }}
      IMAGE_BASE_NAME: ${{ inputs.IMAGE_BASE_NAME }}
      IMAGE_VERSION: ${{ inputs.IMAGE_VERSION }}
      DOCKERFILE: ${{ inputs.DOCKERFILE }}
      ARCH: ${{ matrix.arch }}
    secrets: inherit

  manifest_build:
    name: Publishing image
    timeout-minutes: 60
    needs: build_tests
    runs-on: self-hosted
    if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && inputs.DOCKER_TARGET_REPO != '' }}
    env:
      DOCKER_BUILD_REPO: ${{ inputs.DOCKER_BUILD_REPO }}
      DOCKER_TARGET_REPO: ${{ inputs.DOCKER_TARGET_REPO }}
      IMAGE_BASE_NAME: ${{ inputs.IMAGE_BASE_NAME }}
      IMAGE_VERSION: ${{ inputs.IMAGE_VERSION }}
    steps:
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Create and push manifest
        if: success()
        run: |
          echo "Create manifest"
          docker manifest create ${DOCKER_TARGET_REPO}:${IMAGE_BASE_NAME} ${DOCKER_BUILD_REPO}:${IMAGE_BASE_NAME}-arm64 ${DOCKER_BUILD_REPO}:${IMAGE_BASE_NAME}-amd64
          docker manifest push ${DOCKER_TARGET_REPO}:${IMAGE_BASE_NAME}
          docker manifest rm ${DOCKER_TARGET_REPO}:${IMAGE_BASE_NAME}
      - name: Create and push version manifest
        if: success() && inputs.IMAGE_VERSION != ''
        run: |
          echo "Create version manifest"
          docker manifest create ${DOCKER_TARGET_REPO}:${IMAGE_BASE_NAME}-${IMAGE_VERSION} ${DOCKER_BUILD_REPO}:${IMAGE_BASE_NAME}-arm64 ${DOCKER_BUILD_REPO}:${IMAGE_BASE_NAME}-amd64
          docker manifest push ${DOCKER_TARGET_REPO}:${IMAGE_BASE_NAME}-${IMAGE_VERSION}
          docker manifest rm ${DOCKER_TARGET_REPO}:${IMAGE_BASE_NAME}-${IMAGE_VERSION}

  clean_build_registry:
    name: Cleaning build registry
    timeout-minutes: 60
    needs:
      - build_tests
      - manifest_build
    runs-on: self-hosted
    if: ${{ always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
    env:
      DOCKER_BUILD_REPO: ${{ inputs.DOCKER_BUILD_REPO }}
      IMAGE_BASE_NAME: ${{ inputs.IMAGE_BASE_NAME }}
    steps:
      - name: Remove intermediate images
        run: |
          HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ secrets.DOCKER_USERNAME }}\", \"password\": \"${{ secrets.DOCKER_PASSWORD }}\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/repositories/${DOCKER_BUILD_REPO}/tags/${IMAGE_BASE_NAME}-arm64/
          curl -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/repositories/${DOCKER_BUILD_REPO}/tags/${IMAGE_BASE_NAME}-amd64/
