name: Pre-release (full)

on:
  pull_request:
    title:
      - "Release *.*.*"
      - "Release *.*.*b*"
    branches: refacto2
    paths-ignore:
#      - ".github/**"
      - "**.md"

# cf https://github.com/actions/runner/issues/2324, paths-ignore will only be respected at PR creation
# all new commits then added in the PR will trigger the workflow

env:
  # intermediate registry in which architecture-specific images and base images must be pushed
  INTERMEDIATE_IMAGES_BUILDS_REGISTRY: "nwodtuhs/exegol-builds"

  # base image is used as initial layer when building the final image
  # TODO uncomment below
  # BASE_IMAGE_REGISTRY: "nwodtuhs/exegol-misc-preprod"
  BASE_IMAGE_REGISTRY: "nwodtuhs/exegol-misc-dev-preprod"
  BASE_IMAGE_TAG: "full"
  BASE_IMAGE_DOCKERFILE: "./sources/dockerfiles/base.dockerfile"

  # final image parameters
  # TODO uncomment below
  # IMAGE_TARGET_REGISTRY: "nwodtuhs/exegol-preprod"
  IMAGE_TARGET_REGISTRY: "nwodtuhs/exegol-dev-preprod"
  IMAGE_TAG: "ad"
  DOCKERFILE: "./sources/dockerfiles/debug.dockerfile"

  # ThePorgs/Exegol-docs branch for tools lists export
  DOCS_TARGET_BRANCH: "dev-images"

jobs:
  # https://github.com/orgs/community/discussions/26671, "canâ€™t pass ENV variables to the reusable workflow"
  varset:
    name: Initialize variables
    runs-on: self-hosted
    outputs:
      INTERMEDIATE_IMAGES_BUILDS_REGISTRY: ${{ steps.varset.outputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
      IMAGE_TARGET_REGISTRY: ${{ steps.varset.outputs.IMAGE_TARGET_REGISTRY }}
      IMAGE_TAG: ${{ steps.varset.outputs.IMAGE_TAG }}
      IMAGE_VERSION: ${{ steps.varset.outputs.IMAGE_VERSION }}
      DOCKERFILE: ${{ steps.varset.outputs.DOCKERFILE }}
      BASE_IMAGE_REGISTRY: ${{ steps.varset.outputs.BASE_IMAGE_REGISTRY }}
      BASE_IMAGE_TAG: ${{ steps.varset.outputs.BASE_IMAGE_TAG }}
      BASE_IMAGE_DOCKERFILE: ${{ steps.varset.outputs.BASE_IMAGE_DOCKERFILE }}
      DOCS_TARGET_BRANCH: ${{ steps.varset.outputs.DOCS_TARGET_BRANCH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setting variables
        id: varset
        run: |
          echo "INTERMEDIATE_IMAGES_BUILDS_REGISTRY=${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}" >> $GITHUB_OUTPUT
          echo "IMAGE_TARGET_REGISTRY=${IMAGE_TARGET_REGISTRY}" >> $GITHUB_OUTPUT
          echo "BASE_IMAGE_REGISTRY=${BASE_IMAGE_REGISTRY}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "BASE_IMAGE_TAG=${BASE_IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "DOCKERFILE=${DOCKERFILE}" >> $GITHUB_OUTPUT
          echo "BASE_IMAGE_DOCKERFILE=${BASE_IMAGE_DOCKERFILE}" >> $GITHUB_OUTPUT
          echo "DOCS_TARGET_BRANCH=${DOCS_TARGET_BRANCH}" >> $GITHUB_OUTPUT
          echo "IMAGE_VERSION=$(echo ${{ github.event.pull_request.title }} | cut -d ' ' -f 2)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  code_check:
    name: Code compliance check
    uses: ./.github/workflows/sub_code_check.yml

  build_base:
    name: Base image build
    needs: varset
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64, amd64 ]
    uses: ./.github/workflows/sub_build_belt.yml
    with:
      # ex: nwodtuhs/exegol-builds
      IMAGE_REGISTRY: ${{ needs.varset.outputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
      # ex: base
      IMAGE_TAG: ${{ needs.varset.outputs.BASE_IMAGE_TAG }}
      # ex: base-1.2.3-arm64
      IMAGE_NAME: ${{ needs.varset.outputs.BASE_IMAGE_TAG }}-${{ needs.varset.outputs.IMAGE_VERSION }}-${{ matrix.arch }}
      # ex: 1.2.3
      IMAGE_VERSION: ${{ needs.varset.outputs.IMAGE_VERSION }}
      # ex: base.dockerfile
      DOCKERFILE: ${{ needs.varset.outputs.BASE_IMAGE_DOCKERFILE }}
      # ex: arm64
      ARCH: ${{ matrix.arch }}
      BASE_MODE: true
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  publish_base:
    # TODO test whats happens if build_base fails, where does the pipeline stop, all the rest (excepts cleans) must be skipped
    name: Publish base
    timeout-minutes: 60
    needs: [ varset, build_base ]
    runs-on: self-hosted
    # only publishing if the tests were a success (implicit by the success of build_belt).
    if: needs.build_base.result == 'success'
    steps:
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # only version manifest is used for later builds. Unversioned manifest will stay on the exegol-misc registry for people to use.
      - name: Create manifest
        # ex: docker manifest create nwodtuhs/exegol-misc-preprod:base nwodtuhs/exegol-builds:base-1.2.3-arm64 nwodtuhs/exegol-builds:base-1.2.3-amd64
        run: docker manifest create ${BASE_IMAGE_REGISTRY}:${BASE_IMAGE_TAG} ${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${BASE_IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}-arm64 ${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${BASE_IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}-amd64
      - name: Push manifest to remote
        # ex: docker manifest push nwodtuhs/exegol-misc-preprod:base
        run: docker manifest push ${BASE_IMAGE_REGISTRY}:${BASE_IMAGE_TAG}
      - name: Remove manifest locally
        # ex: docker manifest rm nwodtuhs/exegol-misc-preprod:base
        run: docker manifest rm ${BASE_IMAGE_REGISTRY}:${BASE_IMAGE_TAG}

      - name: Create version manifest
        if: success()
        # ex: docker manifest create nwodtuhs/exegol-misc-preprod:base-1.2.3 nwodtuhs/exegol-builds:base-1.2.3-arm64 nwodtuhs/exegol-builds:base-1.2.3-amd64
        run: docker manifest create ${BASE_IMAGE_REGISTRY}:${BASE_IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }} ${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${BASE_IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}-arm64 ${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${BASE_IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}-amd64
      - name: Push version manifest to remote
        # ex: docker manifest push nwodtuhs/exegol-misc-preprod:base-1.2.3
        run: docker manifest push ${BASE_IMAGE_REGISTRY}:${BASE_IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}
      - name: Remove version manifest locally
        # ex: docker manifest rm nwodtuhs/exegol-misc-preprod:base-1.2.3
        run: docker manifest rm ${BASE_IMAGE_REGISTRY}:${BASE_IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}

  build:
    name: Final image build
    needs: [ varset, code_check, publish_base ]
    if: always() && needs.publish_base.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64, amd64 ]
    uses: ./.github/workflows/sub_build_belt.yml
    with:
      # ex: nwodtuhs/exegol-builds
      IMAGE_REGISTRY: ${{ needs.varset.outputs.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
      # ex: full
      IMAGE_TAG: ${{ needs.varset.outputs.IMAGE_TAG }}
      # ex: full-1.2.3-arm64
      IMAGE_NAME: ${{ needs.varset.outputs.IMAGE_TAG }}-${{ needs.varset.outputs.IMAGE_VERSION }}-${{ matrix.arch }}
      # ex: 1.2.3
      IMAGE_VERSION: ${{ needs.varset.outputs.IMAGE_VERSION }}
      # ex: full.dockerfile
      DOCKERFILE: ${{ needs.varset.outputs.DOCKERFILE }}
      # ex: arm64
      ARCH: ${{ matrix.arch }}
      # ex: nwodtuhs/exegol-misc-preprod
      BASE_IMAGE_REGISTRY: ${{ needs.varset.outputs.BASE_IMAGE_REGISTRY }}
      # ex: base-1.2.3-arm64
      BASE_IMAGE_TAG:  ${{ needs.varset.outputs.BASE_IMAGE_TAG }}-${{ needs.varset.outputs.IMAGE_VERSION }}-${{ matrix.arch }}
    secrets:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      EXEGOL_DOCS_SSH_DEPLOY_KEY: ${{ secrets.EXEGOL_DOCS_SSH_DEPLOY_KEY }}

  publish:
    name: Publish image
    timeout-minutes: 60
    needs: [ varset, build ]
    runs-on: self-hosted
    # only publishing if the tests were a success (implicit by the success of build_belt).
    if: needs.build.result == 'success'
    steps:
      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Create manifest
        # ex: docker manifest create nwodtuhs/exegol-preprod:full nwodtuhs/exegol-builds:full-1.2.3-arm64 nwodtuhs/exegol-builds:full-1.2.3-amd64
        run: docker manifest create ${IMAGE_TARGET_REGISTRY}:${IMAGE_TAG} ${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}-arm64 ${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}-amd64
      - name: Push manifest to remote
        # ex: docker manifest push nwodtuhs/exegol-preprod:full
        run: docker manifest push ${IMAGE_TARGET_REGISTRY}:${IMAGE_TAG}
      - name: Remove manifest locally
        # ex: docker manifest rm nwodtuhs/exegol-preprod:full
        run: docker manifest rm ${IMAGE_TARGET_REGISTRY}:${IMAGE_TAG}
      - name: Create version manifest
        # ex: docker manifest create nwodtuhs/exegol-preprod:full-1.2.3
        run: docker manifest create ${IMAGE_TARGET_REGISTRY}:${IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }} ${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}-arm64 ${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}-amd64
      - name: Push version manifest to remote
        # ex: docker manifest push nwodtuhs/exegol-preprod:full-1.2.3
        run: docker manifest push ${IMAGE_TARGET_REGISTRY}:${IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}
      - name: Remove version manifest locally
        # ex: docker manifest rm nwodtuhs/exegol-preprod:full-1.2.3
        run: docker manifest rm ${IMAGE_TARGET_REGISTRY}:${IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}

  clean_runners:
    name: Clean runner
    needs: [ publish, build, varset ]
    # clean runners, if publish was a success, or at least if build succeeded
    if: always() && ( needs.publish.result == 'success' || !contains(needs.build.outputs.build, 'failure'))
    # if this job errors, it will not affect the rest of the workflow
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64, amd64 ]
    runs-on:
      - self-hosted
      - builder
      - ${{ matrix.arch }}
    steps:
      - name: Remove local base image
        # ex: docker rmi nwodtuhs/exegol-builds:base-1.2.3-arm64
        run: docker rmi ${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${{ env.BASE_IMAGE_TAG }}-${{ needs.varset.outputs.IMAGE_VERSION }}-${{ matrix.arch }}
      - name: Remove local final image
        # ex: docker rmi nwodtuhs/exegol-builds:full-1.2.3-arm64
        run: docker rmi ${INTERMEDIATE_IMAGES_BUILDS_REGISTRY}:${IMAGE_TAG}-${{ needs.varset.outputs.IMAGE_VERSION }}-${{ matrix.arch }}

  clean_registries:
    name: Clean registries
    needs: [ varset, publish ]
    runs-on: self-hosted
    # only cleaning if publish was a success. And publish requires that tests were a success. If tests were a success, there's no need for debugging the images, they can be removed from the exegol-builds registry
    if: needs.publish.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        arch: [ arm64, amd64 ]
    steps:
      - name: Remove remote arch-specific images in ${{ env.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}
        # ex: curl [...] --request DELETE [...]exegol-builds/tags/full-1.2.3-arm64
        # ex: curl [...] --request DELETE [...]exegol-builds/tags/base-1.2.3-arm64
        run: |
          HUB_TOKEN=$(curl --silent --header "Content-Type: application/json" --request POST --data "{\"username\": \"${{ secrets.DOCKER_USERNAME }}\", \"password\": \"${{ secrets.DOCKER_PASSWORD }}\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl --fail-with-body --include --request DELETE -H "Accept: application/json" --header "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/repositories/${{ env.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}/tags/${{ env.BASE_IMAGE_TAG }}-${{ needs.varset.outputs.IMAGE_VERSION }}-${{ matrix.arch }}/
          curl --fail-with-body --include --request DELETE -H "Accept: application/json" --header "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/repositories/${{ env.INTERMEDIATE_IMAGES_BUILDS_REGISTRY }}/tags/${{ env.IMAGE_TAG }}-${{ needs.varset.outputs.IMAGE_VERSION }}-${{ matrix.arch }}/
      # no need to remove versioned manifest for base image here. We want it to stay on the preprod registry and be transfered to prod registry on final release
