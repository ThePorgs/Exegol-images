name: (level 2 sub) Build

on:
  workflow_call:
    inputs:
      TARGET_REGISTRY:
        required: true
        type: string
      BASE_IMAGE_REGISTRY:
        required: false
        type: string
      BASE_IMAGE_NAME:
        required: false
        type: string
      IMAGE_NAME:
        required: true
        type: string
      IMAGE_TAG:
        required: true
        type: string
      IMAGE_VERSION:
        required: false
        type: string
      DOCKERFILE:
        required: true
        type: string
      ARCH:
        required: true
        type: string
    outputs:
      build:
        description: "Build job result"
        value: ${{ jobs.export_results.outputs.build }}

jobs:
  build:
    name: Build or pull image (${{ inputs.ARCH }})
    timeout-minutes: 360
    runs-on:
      - self-hosted
      - builder
      - ${{ inputs.ARCH }}
    steps:
      - name: (dbg) pre-build docker info
        run: |
          docker image ls -a
          docker ps
      - name: Checkout
        uses: actions/checkout@v3
      - name: Prepare build
        # Preparing variables used for tagging the image to build
        id: prepare
        run: echo "BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
      - name: Checking if remote images exist
        id: check_remote_image
        if: inputs.TARGET_REGISTRY != ''
        run: |
          if docker manifest inspect ${{ inputs.TARGET_REGISTRY }}:${{ inputs.IMAGE_NAME }}; then
            echo "Image exists"
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image does not exist"
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi
          cat $GITHUB_OUTPUT
      - name: Build the image
        if: success() && steps.check_remote_image.outputs.image_exists != 'true'
        uses: docker/build-push-action@v4
        with:
          load: true
          no-cache: true
          build-args: |
            BASE_IMAGE_REGISTRY=${{ inputs.BASE_IMAGE_REGISTRY }}
            BASE_IMAGE_NAME=${{ steps.prepare.outputs.BASE_IMAGE_NAME }}
            TAG=${{ inputs.IMAGE_TAG }}
            VERSION=${{ inputs.IMAGE_VERSION }}
            BUILD_DATE=${{ steps.prepare.outputs.BUILD_DATE }}
          tags: "${{ inputs.TARGET_REGISTRY }}:${{ inputs.IMAGE_NAME }}"
          platforms: linux/${{ inputs.ARCH }}
          file: ${{ inputs.DOCKERFILE }}
          context: .
      - name: Pull the image
        if: always() && steps.check_remote_image.outputs.image_exists == 'true'
        run: docker pull ${{ inputs.TARGET_REGISTRY }}:${{ inputs.IMAGE_NAME }}
      - name: (dbg) post-build docker info
        if: always()
        run: |
          docker image ls -a
          docker ps
          docker inspect ${{ inputs.TARGET_REGISTRY }}:${{ inputs.IMAGE_NAME }}
  export_results:
    name: Exporting build results for higher jobs
    needs: build
    if: always()
    runs-on: self-hosted
    steps:
      - name: Extract build result
        id: build
        run: echo "result=${{ needs.build.result }}" >> $GITHUB_OUTPUT
    outputs:
      build: ${{ steps.build.outputs.result }}