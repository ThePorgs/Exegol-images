name: (level 2 sub) Test

on:
  workflow_call:
    inputs:
      IMAGE_REGISTRY:
        required: true
        type: string
      IMAGE_NAME:
        required: true
        type: string
      ARCH:
        required: true
        type: string

jobs:
  test:
    timeout-minutes: 5
    name: Test image (${{ inputs.ARCH }})
    runs-on:
      - self-hosted
      - tester
      - ${{ inputs.ARCH }}
    steps:
      - name: (dbg) inspect the image
        run: docker inspect ${{ inputs.IMAGE_REGISTRY }}:${{ inputs.IMAGE_NAME }}
      - name: Create a container from the built image
        run: |
          docker run --name exegol-${{ inputs.IMAGE_NAME }} --rm -t -d ${{ inputs.IMAGE_REGISTRY }}:${{ inputs.IMAGE_NAME }} endless
      - name: Run the tests
        if: success()
        run: |
          docker exec exegol-${{ inputs.IMAGE_NAME }} zsh -c 'cat /.exegol/build_pipeline_tests/all_commands.txt | grep -vE "^\s*$" | sort -u > /.exegol/build_pipeline_tests/all_commands.sorted.txt'
          docker exec exegol-${{ inputs.IMAGE_NAME }} python3 /.exegol/build_pipeline_tests/run_tests.py
      - name: Print the failed tests if any
        if: failure()
        run: |
          docker exec exegol-${{ inputs.IMAGE_NAME }} cat /.exegol/build_pipeline_tests/failed_commands.log
      - name: Print the successful tests
        if: always()
        run: |
          docker exec exegol-${{ inputs.IMAGE_NAME }} cat /.exegol/build_pipeline_tests/success_commands.log
      - name: Stop the container
        if: always()
        run: docker stop exegol-${{ inputs.IMAGE_NAME }}
